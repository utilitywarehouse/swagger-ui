// Code generated by go-bindata.
// sources:
// fs.go
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _fsGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4d\x6f\x1b\x37\x10\x3d\x2f\x7f\xc5\x44\x87\x80\x6b\x6c\x57\x3e\x14\x3d\x18\xd0\x21\x48\x62\xc0\x40\xe2\x06\x55\x6f\x82\x51\x50\xda\xa1\x44\x78\x97\x5c\x90\xe3\xaf\x0a\xfa\xef\xc5\x0c\x57\xd2\xda\x92\x81\xa4\x3e\x58\xe2\xc7\x3c\xce\x7b\xf3\x38\xd4\x74\x0a\x3f\xcc\xea\xde\xac\x11\x4c\x4a\x48\x36\x41\x1f\xc3\xa3\x6b\x30\x81\xf1\xb0\x21\xea\xeb\x6b\xd7\xe2\xfc\x25\x11\x76\x60\x43\x84\x75\xf8\x6d\xe9\x7c\x63\xc8\xe4\x90\x54\xab\xfe\x35\x84\x52\xae\xeb\x43\x24\xd0\xaa\x98\x2c\x5f\x08\xd3\x44\x15\x13\x8f\x34\x65\x3c\xfe\x1e\x64\xa6\x37\xb4\xe1\xcf\x14\x22\xf1\x27\xb9\x0e\x27\xaa\x54\x6a\x3a\x85\x4f\x0c\x35\xa7\x10\x71\x94\xd0\x6a\x85\x29\x01\x85\xe1\x60\x58\xa3\xc7\x68\x08\x1b\x58\xbe\x8c\xf2\xaa\x15\xbd\xf4\x38\x86\x48\x14\x1f\x56\x04\x5b\x55\xdc\x9a\x0e\x13\xd8\x07\xbf\xd2\x25\x2c\xee\x12\x45\xe7\xd7\xaa\xf8\xc2\x74\xf2\xb4\x75\x2d\x7a\xd3\x49\x90\xf3\xeb\x12\xf4\xe2\x8e\x49\x54\x80\x31\x86\x58\xaa\xe2\xc6\xdb\xf0\xee\xe6\x90\x44\x30\xde\x73\x88\xd8\x1d\x29\x5d\xcf\xc1\x25\x30\x90\xc8\x90\x5b\x01\xc7\x43\xc2\xf8\x88\x11\x68\x63\x08\x5c\xd7\xb7\xd8\xa1\xa7\x04\xb4\xc1\x93\x02\x38\x4f\x18\xad\x59\xe1\x98\xe3\xf5\x7c\x44\xb0\x83\xce\xf4\x8b\x9c\xce\xdd\x85\x08\xc5\xe4\x38\x07\x89\x38\xcc\x8c\x62\x96\x00\x00\x99\xa5\x2a\x1c\xb3\x1b\xb1\x18\xb2\xbf\xc5\x27\x58\x45\x34\x94\x9d\xb1\x3f\xd8\xc6\xd0\x81\x81\xd6\x25\x82\x60\x85\x0f\xaf\x37\x9c\xbd\x8b\x20\xd5\xaf\x95\xd8\x8c\x08\xa3\xcf\xec\xd7\x6d\x58\xe6\x50\xf6\x40\xfd\xdd\xd0\x6a\x53\x49\x18\x27\xde\x03\xc5\x07\x84\x0e\x8d\x97\x6a\xcb\x1c\x63\x04\x6b\x45\x95\x7e\xc0\xd2\x58\xaf\x6b\x68\x5c\x84\x3e\xa2\x75\xcf\x65\xc6\xe4\x2d\x22\x2c\x57\xa6\x56\x5c\x28\x4e\x5f\x5b\xb8\x38\x7a\xa2\x04\x7d\x31\x90\xd8\xd7\x29\xcb\x77\x35\x83\xce\xdc\xa3\x3e\x2b\x63\xa9\x0a\xbe\x03\xff\x54\x60\x3d\xef\x8c\xc6\xaf\x11\x6c\x2d\xb6\xd2\x82\x20\x02\x0a\x24\x6f\xb0\x35\x6b\xa8\xad\x2f\x79\xc5\xca\xf4\x87\x19\x78\xd7\xca\xde\x22\x22\x3d\x44\xcf\x63\x09\x51\x45\xb1\x53\x45\xc1\x2e\x1e\x41\xf0\xc9\xbf\x0c\xe1\x62\x95\x55\xb8\x9a\x65\x95\xe7\x7d\xeb\xe8\x08\x23\x6b\xb3\x19\x4c\x9c\x6f\xf0\xb9\xde\x50\xd7\x4e\x32\x20\x0b\x3a\x83\x4f\x4d\xf3\x43\x54\xd5\x93\xe9\xa4\xca\x10\x9f\x5b\x34\x5e\x37\x2e\x96\x0c\x52\x74\x8b\xc6\xc5\x3b\x98\xc1\xc7\x83\x40\xdb\xe5\xd5\xe0\xa4\xed\xae\x02\x96\xe2\x8a\x0b\x24\x22\x70\xdc\x6e\x48\xef\x9e\xd3\x7a\x73\x44\x4e\xad\x5b\xdc\x9f\x42\x66\x41\x32\x1c\xff\xdf\x29\x46\x19\x98\x7f\x1c\xea\xb8\xed\x76\x15\xcb\x30\x38\xf6\xcf\x1e\xfd\x2f\xdc\x27\xb1\x89\xb6\x09\xf6\xb6\x28\x05\x41\xbf\xbe\xde\x07\x80\xb1\x69\x6c\x05\xf8\xec\x12\x25\x29\x57\xaa\xbb\x05\x07\xdd\x29\x96\xf9\xc3\xb0\xc2\xca\x8e\x2b\x15\x52\xfd\x35\xc6\xdb\x40\x5f\x79\x7d\x4c\xc7\xe3\x13\x1f\xa0\x6d\xbd\xac\xc0\xd6\x4c\xb7\x1c\xf3\xba\x96\x3b\x96\x37\xa7\x93\xbb\xe7\xbc\x10\x1d\x38\x9c\xa5\x25\x00\xa3\xf6\x27\x14\x0e\xbe\xdf\xcf\x56\xd0\xa2\xd7\xcc\x86\x8b\xed\x78\xfd\x32\xbb\xff\x95\xf5\x53\xdd\x09\x37\xbb\x70\x5c\x36\xeb\x85\x0a\xb7\xf4\x7a\x2e\x38\x49\xdb\xf2\xc0\xcd\x0e\x1c\xbe\xa1\x3f\x30\xe0\x74\x5b\xf4\x6b\xda\x30\x0b\x1e\xad\xdd\x23\xfa\x6c\xd0\x9f\xa0\xf3\xed\x6d\x91\x9c\xa7\xff\x51\x95\xcb\x71\x0d\x84\x7a\xbd\x94\xd6\x2d\x47\xee\x8b\x22\xef\xde\xfe\x41\x78\xdb\x2a\x4b\xc8\x9d\x82\xc7\x0c\x2d\xd7\x37\xb7\xc0\x5b\x7c\xfa\x0b\x4d\x83\x51\x10\x8e\x82\x7c\x3c\x04\x70\x2a\x79\xcb\x15\x00\xc4\x4a\x15\xc5\x1e\x37\x7b\xbe\xe2\x04\x5f\xb5\x71\x39\xe7\xd8\xc6\x2f\xf2\x51\x19\x44\x15\x6f\x7a\xf8\xa0\xdc\x28\xc5\x12\x3e\xb7\x21\xa1\x2e\xb3\x95\x25\xe3\x83\x43\xdf\x0b\x61\xf4\xc6\x45\xbd\x0a\x0f\x9e\x58\x6a\x79\x20\xcf\xbc\x7a\xaf\xe1\xf6\x86\xbf\xf1\x8f\xa6\x75\xcd\x7b\xe8\x73\x32\xa4\xcf\xbf\xa2\x23\x3c\x3b\x5a\x1c\x52\x15\x51\x86\x46\x33\x18\x61\x7f\x42\xb3\x9f\x2f\x81\xdb\xb4\x2e\x87\x75\xc8\x7f\xdb\xc1\x88\xc3\xac\x6e\x4a\xd8\x9d\x46\xce\xdd\xbf\x1c\xe9\x3c\xfd\xf1\x3b\xbc\x8d\xbc\x3c\x17\xf1\x3d\x34\x1c\x31\x30\xe1\xd1\x4f\x44\xfc\xed\x24\x41\xfe\x25\x54\xf3\xf7\x63\x84\x4c\xdd\x86\x27\x7d\x36\xbd\x9b\xf4\xc5\x45\x5d\xc2\x32\x84\xf6\x24\x3d\x79\x4d\xcf\x71\x7a\x49\x99\x52\x6e\x81\xdb\xdd\x38\x88\x9f\x97\x9d\xfa\x2f\x00\x00\xff\xff\x60\xb4\x2e\x8c\x20\x0a\x00\x00")

func fsGoBytes() ([]byte, error) {
	return bindataRead(
		_fsGo,
		"fs.go",
	)
}

func fsGo() (*asset, error) {
	bytes, err := fsGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "fs.go", size: 2592, mode: os.FileMode(420), modTime: time.Unix(1506356468, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"fs.go": fsGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"fs.go": &bintree{fsGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

